{load} = require('./stackiter-loader')
log = console.log


chooseDropWhereLandOnOther = (states) ->
  formerHadGrasp = false
  graspedId = -1
  ungraspState = null
  for state in states
    if ungraspState
      if state.cleared
        # Ignore this sequence, because of clear before settling.
        graspedId = -1
        ungraspState = null
        continue
      done = false
      item = findItem state, graspedId
      if item
        # Still here. See if it's moving.
        if norm(item.velocity) < 0.01
          # Stopped. See where it is.
          # TODO If the block bounced up, we might be catching it at the peak.
          # TODO Maybe we should check for that (by accel or location?).
          done = true
          label = not onGround item
      else
        # It fell off the table, so it didn't land on another block.
        done = true
        label = false
      if done
        ungraspState = null
        # TODO More.
    else
      graspedItems = findGraspedItems state
      hasGrasp = Boolean graspedItems.length
      if hasGrasp
        # TODO Support multiple grasped items intelligently?
        graspedId = graspedItems[0].id
      else if formerHadGrasp
        ungraspState = state
      formerHadGrasp = hasGrasp

findGraspedItems = (state) ->
  []

findItem = (state, id) ->
  for item in state.items
    if item.id is id
      return item
  null

go = ->
  # TODO Determine project root or let file be passed in.
  load 'temp/stackiter-20101105-171808-671_drop-from-25.log',
    #stateLimit: 1000
    ready: (states) ->
      report(states)
      chooseDropWhereLandOnOther(states)


norm = (vector) ->
  0


onGround = (item) ->
  false


report = (states) ->
  log "At end:"
  # TODO What's the best way to say 'last item' in JS/Coffee?
  log "#{states[states.length - 1].items.length} items"
  #log states[102]
  #log states[102].items[9].extent
  #log "#{states[102].items.length} here"
  #log "#{states[700].items.length} there"
  log "#{states.length} states"


go()
