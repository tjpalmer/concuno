log = console.log
{readFile} = require 'fs'


exports.load = (file) ->
  readFile file, 'utf8', (err, content) ->
    throw err if err
    log "Parsing #{file} ..."
    new Loader().parseAll content.split /\n/


# TODO Move clone out to some utility area.
clone = (obj) ->
  # This could be more sophisticated about more types, but eh.
  return obj if typeof obj isnt 'object'
  copied = new obj.constructor
  for key, val of obj
    copied[key] = clone(val)
  copied


class Loader

  constructor: ->
    @indexes = []
    @state = items: [], time: 0
    @states = []

  parseAll: (lines) ->
    for line in lines
      @parseLine line
    @states.push clone @state
    log "At end:"
    log "#{@state.items.length} items"
    #log @states[100]
    #log "#{@states[100].items.length} here"
    #log "#{@states[700].items.length} there"
    log "#{@states.length} states"

  parseDestroy: (args) ->
    id = Number args[1]
    index = @indexes[id]
    throw "no such item" if not index?
    # Remove the item and update the indexes.
    @state.items.splice index, 1
    for i in [index ... @state.items.length]
      @indexes[@state.items[i].id]--

  parseItem: (args) ->
    id = Number args[1]
    @indexes[id] = @state.items.length
    @state.items.push {id}

  parseLine: (line) ->
    args = line.trim().split /\s+/
    switch args[0]
      when 'destroy'
        @parseDestroy args
      when 'item'
        @parseItem args
      when 'time'
        @parseTime args

  parseTime: (args) ->
    if args[1] is 'sim'
      @states.push clone @state
      @state.time = Number args[2]
